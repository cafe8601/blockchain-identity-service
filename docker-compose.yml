version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: blockchain-identity-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: blockchain_identity
      POSTGRES_USER: blockchain_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_me}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/database/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U blockchain_user -d blockchain_identity"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - blockchain-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: blockchain-identity-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./infrastructure/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - blockchain-network

  # IPFS Node
  ipfs:
    image: ipfs/kubo:latest
    container_name: blockchain-identity-ipfs
    restart: unless-stopped
    ports:
      - "4001:4001"      # IPFS Swarm
      - "5001:5001"      # API
      - "8080:8080"      # Gateway
    volumes:
      - ipfs_data:/data/ipfs
    environment:
      - IPFS_PROFILE=server
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5001/api/v0/id"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - blockchain-network

  # Identity Service API
  identity-service:
    build:
      context: .
      dockerfile: services/identity-service/Dockerfile
    container_name: blockchain-identity-service
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://blockchain_user:${POSTGRES_PASSWORD:-secure_password_change_me}@postgres:5432/blockchain_identity
      REDIS_URL: redis://redis:6379
      IPFS_API_URL: http://ipfs:5001
      IPFS_GATEWAY_URL: http://ipfs:8080
      JWT_SECRET: ${JWT_SECRET:-development_jwt_secret_change_in_production}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-development_encryption_key_32_bytes}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      RATE_LIMIT_WINDOW_MS: 900000  # 15 minutes
      RATE_LIMIT_MAX_REQUESTS: 100
    volumes:
      - ./services/identity-service:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ipfs:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - blockchain-network

  # Frontend Dashboard
  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile
    container_name: blockchain-identity-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      REACT_APP_API_URL: http://localhost:3001
      REACT_APP_IPFS_GATEWAY: http://localhost:8080
      GENERATE_SOURCEMAP: false
      DISABLE_ESLINT_PLUGIN: true
    volumes:
      - ./apps/frontend:/app
      - /app/node_modules
    depends_on:
      - identity-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - blockchain-network

  # API Gateway (NGINX)
  api-gateway:
    image: nginx:alpine
    container_name: blockchain-identity-gateway
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./infrastructure/ssl:/etc/nginx/ssl
    depends_on:
      - identity-service
      - frontend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - blockchain-network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: blockchain-identity-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - blockchain-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: blockchain-identity-grafana
    restart: unless-stopped
    ports:
      - "3003:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin_change_me}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - blockchain-network

  # Development Database Admin
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: blockchain-identity-pgadmin
    restart: unless-stopped
    profiles:
      - development
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@blockchain-identity.com
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin_change_me}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - blockchain-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ipfs_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  blockchain-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16